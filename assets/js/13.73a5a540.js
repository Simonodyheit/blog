(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{636:function(t,e,a){"use strict";a.r(e);var s=a(16),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-c-initiation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-c-initiation"}},[t._v("#")]),t._v(" 1. "),a("code",[t._v("C++")]),t._v(" Initiation")]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("A C++ vanilla program")]),t._v(" "),a("div",{staticClass:"language-Cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// myfirst.cpp -- display a message")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a preprecessor directive ")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function header")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// start of the function body")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// make definition visible")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Come up and C++ me some time"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//message")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// start a new line")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"You won\'t regret it!"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// more output")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// terminate the main()")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// end of function body")]),t._v("\n")])])])]),t._v(" "),a("h3",{attrs:{id:"_1-1-header-filenames-iostream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-header-filenames-iostream"}},[t._v("#")]),t._v(" 1.1 Header Filenames "),a("code",[t._v("iostream")])]),t._v(" "),a("ul",[a("li",[t._v("No extension as the "),a("code",[t._v("h")]),t._v(" in "),a("code",[t._v("C")]),t._v(" ---\x3e enter "),a("code",[t._v("namespace")]),t._v(".")]),t._v(" "),a("li",[t._v("Header file names from "),a("code",[t._v("C")]),t._v(" to "),a("code",[t._v("C++")]),t._v(" start with "),a("code",[t._v("c")]),t._v(", like "),a("code",[t._v("cmath")]),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"_1-2-function-header-int-main"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-function-header-int-main"}},[t._v("#")]),t._v(" 1.2 Function Header "),a("code",[t._v("int main()")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("main()")]),t._v(" is called by "),a("em",[t._v("startup code")]),t._v(", so it's also a function.")]),t._v(" "),a("li",[a("code",[t._v("int")]),t._v(" means "),a("code",[t._v("main()")]),t._v(" returns an "),a("strong",[t._v("integer")]),t._v(" value to the calling function (in startup code)")]),t._v(" "),a("li",[a("code",[t._v("()")]),t._v(" means that the function takes no information/"),a("em",[t._v("argument")]),t._v(".")]),t._v(" "),a("li",[t._v("Same as "),a("code",[t._v("int main(void)")]),t._v(", pero this is not the case in "),a("code",[t._v("C")]),t._v(", which is TBD when nothing is given in the "),a("code",[t._v("()")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("return 0;")]),t._v(" is omittable "),a("strong",[t._v("only")]),t._v(" for "),a("code",[t._v("main()")]),t._v(" function.")]),t._v(" "),a("li",[t._v("The compelling "),a("code",[t._v("main")]),t._v(" the function name\n"),a("blockquote",[a("p",[t._v("If you don't have "),a("code",[t._v("main()")]),t._v(", you don't have a complete "),a("em",[t._v("standalone")]),t._v(" program.")])])])]),t._v(" "),a("h3",{attrs:{id:"_1-3-namespaces"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-namespaces"}},[t._v("#")]),t._v(" 1.3 Namespaces")]),t._v(" "),a("blockquote",[a("p",[t._v("If you use "),a("code",[t._v("iostream")]),t._v(" instead of "),a("code",[t._v("iostream.h")]),t._v(", you should use "),a("code",[t._v("using namespace std;")]),t._v(" the namespace directive to make the definition "),a("code",[t._v("iostream")]),t._v(" available to your program.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("In this spirit, the classes, functions, and variables that are a standard component of C++ compilers are now placed in a namespace called "),a("code",[t._v("std")]),t._v(". This takes place in the h-free header files. This means, for example, that the "),a("code",[t._v("cout")]),t._v(" "),a("s",[t._v("variable")]),t._v(" (this should be named "),a("em",[t._v("object")]),t._v(") used for output and defined in\niostream is really called "),a("code",[t._v("std::cout")]),t._v(" and that "),a("code",[t._v("endl")]),t._v(" is really "),a("code",[t._v("std::endl")]),t._v(". Thus, you can omit the using directive and, instead, code in the following style:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Come up and C++ me some time."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),a("p",[t._v("That's to say, overall have we three-fold approaches:")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("iostream.h")]),t._v(" and "),a("code",[t._v("cout")])]),t._v(" "),a("li",[a("code",[t._v("iostream")]),t._v(" and "),a("code",[t._v("std::cout")])]),t._v(" "),a("li",[a("code",[t._v("iostream")]),t._v(" and "),a("code",[t._v("cout")]),t._v(" under the namespace "),a("code",[t._v("std")]),t._v(" (invoked by the statement "),a("code",[t._v("using namespace std;")]),t._v("(Q: where should one put the statement?))\nIn this spirit, one can even use "),a("code",[t._v("using")]),t._v(" to make particular names available.")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the above three are euqal to one single statement below")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_1-4-c-output"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-c-output"}},[t._v("#")]),t._v(" 1.4 "),a("code",[t._v("C++")]),t._v(" Output")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Come up and C++ me some time"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("The "),a("code",[t._v('"xxx"')]),t._v(" is a "),a("em",[t._v("chracter string")]),t._v(".")]),t._v(" "),a("li",[t._v("The statement inserts the string into the "),a("em",[t._v("output stream")]),t._v(".")]),t._v(" "),a("li",[t._v("The insertion operation "),a("code",[t._v("<<")]),t._v(" indicates that the string is sent to "),a("code",[t._v("cout")]),t._v(". It represents the "),a("em",[t._v("information flow")]),t._v(". And it's also a trigger to call the inner method of object's corresponding class if necessary.")]),t._v(" "),a("li",[a("code",[t._v("cout")]),t._v(" is a predefined object managing displays, predefined in "),a("code",[t._v("iostream")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("endl")]),t._v(" is a "),a("em",[t._v("manipulator")]),t._v(", defined in "),a("code",[t._v("iostream")]),t._v(" head file and is also part of the "),a("code",[t._v("std")]),t._v(" namespace.")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"You won\'t regret it!"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// same as ")]),t._v("\ncout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"You won\'t regret it!\\n"')]),t._v("\n")])])]),a("h3",{attrs:{id:"_1-5-code-style"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-code-style"}},[t._v("#")]),t._v(" 1.5 Code Style")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("ol",[a("li",[t._v("One statement one line")]),t._v(" "),a("li",[t._v("An opening brace and a closing brace for a function, each of which is on its own line")]),t._v(" "),a("li",[t._v("Statements in a function indented from the braces")]),t._v(" "),a("li",[t._v("No whitespace around the parentheses associated with a function name")])]),t._v(" "),a("p",[t._v("The fourth helps to differentiate functions from some built-in C++ structures, such as loops, that also use parentheses.")])]),a("h2",{attrs:{id:"_2-glossary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-glossary"}},[t._v("#")]),t._v(" 2. Glossary")]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("See More")]),t._v(" "),a("ul",[a("li",[t._v("Initiation")]),t._v(" "),a("li",[t._v("Function Header and Body")]),t._v(" "),a("li",[t._v("Header  File")]),t._v(" "),a("li",[t._v("Namespace (@Omittance)")]),t._v(" "),a("li",[t._v("Statement")]),t._v(" "),a("li",[t._v("Argument")]),t._v(" "),a("li",[t._v("Terminator")]),t._v(" "),a("li",[t._v("Manipulator")]),t._v(" "),a("li",[t._v("Character String")]),t._v(" "),a("li",[t._v("Information Flow")]),t._v(" "),a("li",[t._v("Output Stream")]),t._v(" "),a("li",[t._v("Parentheses and Braces")]),t._v(" "),a("li",[t._v("Whitespace")])])]),t._v(" "),a("h2",{attrs:{id:"summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[t._v("#")]),t._v(" Summary")]),t._v(" "),a("p",[t._v("TBD.")])])}),[],!1,null,null,null);e.default=n.exports}}]);