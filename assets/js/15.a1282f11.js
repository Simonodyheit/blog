(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{644:function(t,s,a){"use strict";a.r(s);var e=a(16),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"simple-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simple-variables"}},[t._v("#")]),t._v(" Simple Variables")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"},[t._v("Before the OOP")]),a("p",[t._v("But before you can create your own types, you must know and understand the types that are built in to "),a("code",[t._v("C++")]),t._v(" because those types will be your building blocks.")])]),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("C++ types")]),t._v(" "),a("ol",[a("li",[t._v("fundamental types\n"),a("ol",[a("li",[t._v("integers")]),t._v(" "),a("li",[t._v("floating-point numbers")])])]),t._v(" "),a("li",[t._v("compound types\n"),a("ol",[a("li",[t._v("arrays")]),t._v(" "),a("li",[t._v("strings")]),t._v(" "),a("li",[t._v("pointers")]),t._v(" "),a("li",[t._v("structures")])])])])]),t._v(" "),a("h2",{attrs:{id:"_1-identify-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-identify-data"}},[t._v("#")]),t._v(" 1. Identify data")]),t._v(" "),a("p",[t._v("But identify what?")]),t._v(" "),a("ol",[a("li",[t._v("What kind of type is the data? ---\x3e data type")]),t._v(" "),a("li",[t._v("What is in the data? ---\x3e value")]),t._v(" "),a("li",[t._v("Where is the data stored? ---\x3e address")])]),t._v(" "),a("p",[t._v("In whatever way, one must specify the first two information in advance in a program, but for the 3rd, it's a choice. "),a("code",[t._v("&")]),t._v(" and pointer can be involved.")]),t._v(" "),a("h2",{attrs:{id:"_2-naming-varaibles"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-naming-varaibles"}},[t._v("#")]),t._v(" 2. Naming Varaibles")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"},[t._v("Rules")]),a("ol",[a("li",[t._v("alphabetic characters, numeric digits, and the underscore character")]),t._v(" "),a("li",[t._v("The first character should not be a numeric digit.")]),t._v(" "),a("li",[t._v("case sesentive")]),t._v(" "),a("li",[t._v("no keyword")]),t._v(" "),a("li",[t._v("Names beginning with two "),a("code",[t._v("_")]),t._v("s or with an "),a("code",[t._v("_")]),t._v(" plus an upperccase letter are reserved by the complier or global identifiers.")]),t._v(" "),a("li",[t._v("length limits may happen")])])]),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("Example")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" poodle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Y")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" Poodle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Y")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" POODLE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Y")]),t._v("\nInt terrier"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// N")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" my_stars3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Y")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" _Mystars3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// N")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("ever"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// N")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// N")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" begin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Y")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" __fools"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// N")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" the_very_best_variable_i_can_be_version_112"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Y")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" honkey"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("tonk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// N")]),t._v("\n")])])])]),t._v(" "),a("h2",{attrs:{id:"_3-integer-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-integer-types"}},[t._v("#")]),t._v(" 3. Integer Types")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("The various "),a("code",[t._v("C++")]),t._v(" integer types differ in the amount of memory they use to hold an integer. The more memory a value uses, the wider it is.")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("char")])]),t._v(" "),a("li",[a("code",[t._v("short")])]),t._v(" "),a("li",[a("code",[t._v("int")])]),t._v(" "),a("li",[a("code",[t._v("long")])]),t._v(" "),a("li",[a("code",[t._v("long long")]),t._v("\nAnd each comes in both signed and unsigned versions."),a("br"),t._v("\nNotes:")])]),t._v(" "),a("ul",[a("li",[t._v("A "),a("code",[t._v("short")]),t._v(" integer is at least 16 bits wide.")]),t._v(" "),a("li",[t._v("An "),a("code",[t._v("int")]),t._v(" integer is at laest as big as "),a("code",[t._v("short")]),t._v(".")]),t._v(" "),a("li",[t._v("A "),a("code",[t._v("long")]),t._v(" integer is at least 32 bits wide and at least as big as "),a("code",[t._v("int")]),t._v(".")]),t._v(" "),a("li",[t._v("A "),a("code",[t._v("long long")]),t._v(" integer is at least 64 bits wide and at least as big as "),a("code",[t._v("long")]),t._v(".")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"title"}),a("p",[t._v("However, "),a("code",[t._v("C++")]),t._v(" defines byte differently. The "),a("code",[t._v("C++")]),t._v(" byte consists of at least enough adjacent bits to accommodate the basic character set for the implementation. That is, the number of possible values must equal or exceed the number of distinct characters. In the United States, the basic character sets are usually the ASCII and EBCDIC sets, each of which can be accommodated by 8 bits, so the "),a("code",[t._v("C++")]),t._v(" byte is typically 8 bits on systems using those character sets. However, international programming can require much larger character sets, such as Unicode, so some implementations may use a 16-bit byte or even a 32-bit byte. Some use the term "),a("em",[t._v("octet")]),t._v(" to denote an 8-bit byte.")])]),a("p",[t._v("To tell how much is which.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// limits.cpp -- some integer limit")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<climits>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n_int "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" INT_MAX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" n_short "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" SHRT_MAX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" n_long "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LONG_MAX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" n_llong "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LLONG_MAX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"int is "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n_int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" bytes."')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"short is "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n_short"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" bytes."')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"long is "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n_long"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" bytes."')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"long long is "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n_llong"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" bytes."')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3-1-choosing-an-integer-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-choosing-an-integer-type"}},[t._v("#")]),t._v(" 3.1 Choosing an Integer Type")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"},[t._v("Remember")]),a("p",[t._v("A bit saved is a bit earned.")])]),a("h2",{attrs:{id:"_4-integer-literals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-integer-literals"}},[t._v("#")]),t._v(" 4. Integer Literals")]),t._v(" "),a("p",[a("code",[t._v("0")]),t._v("/"),a("code",[t._v("0x")]),t._v(", "),a("code",[t._v("0X")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hexoct2.cpp -- display values in hex and octal")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" chest "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Chest: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" chest "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// default: decimal ---\x3e 42")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" hex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// turn the base to hexadecimal")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Chest: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" chest "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ---\x3e 2a")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" oct"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Chest: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" chest "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ---\x3e 52")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"_5-how-c-decides-what-type-a-constant-is"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-how-c-decides-what-type-a-constant-is"}},[t._v("#")]),t._v(" 5. How "),a("code",[t._v("C++")]),t._v(" Decides What Type a Constant Is")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[a("code",[t._v("C++")]),t._v(" stores integer constants as type "),a("code",[t._v("int")]),t._v(" unless there is a reason to do otherwise. Two such reasons are if you use a special suffix to indicate a particular type or if a value is too large to be an "),a("code",[t._v("int")]),t._v(".")])]),a("p",[t._v("More details of the "),a("em",[t._v("suffixes")]),t._v(":")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("l")]),t._v(" or "),a("code",[t._v("L")]),t._v(" suffix ------\x3e "),a("code",[t._v("long")]),t._v("; also there is likewise "),a("code",[t._v("ll/LL")])]),t._v(" "),a("li",[a("code",[t._v("u")]),t._v(" or "),a("code",[t._v("U")]),t._v(" suffix ------\x3e "),a("code",[t._v("unsigned int")])]),t._v(" "),a("li",[a("code",[t._v("ul")]),t._v(" or "),a("code",[t._v("uL")]),t._v(" suffix -------\x3e "),a("code",[t._v("unsigned long")]),t._v("; also there is likewise "),a("code",[t._v("ull/uLL")])])]),t._v(" "),a("h2",{attrs:{id:"_6-char"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-char"}},[t._v("#")]),t._v(" 6. "),a("code",[t._v("char")])]),t._v(" "),a("p",[a("code",[t._v("char")]),t._v(" is also an integer type.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Enter a character: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tcout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" ch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tcout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" nch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("In the above program, what is stored in "),a("code",[t._v("ch")]),t._v(" and "),a("code",[t._v("nch")]),t._v(" is exactly the same, it is the smart object "),a("code",[t._v("cout")]),t._v(" determines which kind to print out based on the data type.")])]),a("h3",{attrs:{id:"_6-1-char-literals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-char-literals"}},[t._v("#")]),t._v(" 6.1 "),a("code",[t._v("char")]),t._v(" Literals")]),t._v(" "),a("p",[t._v("Enter "),a("em",[t._v("escape sequence")]),t._v(".")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("\\a")]),t._v(" ---\x3e "),a("em",[t._v("alert character")])]),t._v(" "),a("li",[a("code",[t._v("\\n")]),t._v(" ---\x3e "),a("em",[t._v("newline")])]),t._v(" "),a("li",[a("code",[t._v("\\t")]),t._v(" ---\x3e "),a("em",[t._v("horizontal tab")])]),t._v(" "),a("li",[a("code",[t._v("\\v")]),t._v(" ---\x3e "),a("em",[t._v("vertical type")])]),t._v(" "),a("li",[t._v("and more")])]),t._v(" "),a("h3",{attrs:{id:"_6-2-signed-char-and-unsigned-char"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-signed-char-and-unsigned-char"}},[t._v("#")]),t._v(" 6.2  "),a("code",[t._v("signed char")]),t._v(" and "),a("code",[t._v("unsigned char")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("Unlike "),a("code",[t._v("int")]),t._v(", "),a("code",[t._v("char")]),t._v(" is not signed by default, nor is it unsigned by default.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" fodo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// maybe signed, maube unsigned")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// unsigned")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("signed")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" snark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// signed")]),t._v("\n")])])]),a("p",[t._v("To hold a standard "),a("em",[t._v("ASCII")]),t._v(" character, it doesn't really matter whether "),a("code",[t._v("char")]),t._v(" is "),a("code",[t._v("signed")]),t._v(" or "),a("code",[t._v("unsigned")]),t._v(".")])]),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("But why?")]),t._v(" "),a("p",[a("code",[t._v("signed char")]),t._v(" type typically represents the range 0 to 255, and "),a("code",[t._v("signed char")]),t._v(" type typically represents the range -128 to 127. Since there are only 127 representations, it does not matter. And also, the memory efficiency is not an issue; they are the same.")])]),t._v(" "),a("h3",{attrs:{id:"_6-3-wchar-t-char16-t-and-char32-t"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-wchar-t-char16-t-and-char32-t"}},[t._v("#")]),t._v(" 6.3 "),a("code",[t._v("wchar_t")]),t._v(", "),a("code",[t._v("char16_t")]),t._v(", and "),a("code",[t._v("char32_t")])]),t._v(" "),a("ol",[a("li",[a("code",[t._v("wchar_t")]),t._v("\nEver wonder why "),a("code",[t._v('char a = "Simon"')]),t._v(" does not work, that's because the memory space allocated to the data type "),a("code",[t._v("char")]),t._v(" is far away enough for a "),a("em",[t._v("string")]),t._v("; it's for a "),a("em",[t._v("character")]),t._v(" marked by single quote marks.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("The usual 8-bit "),a("code",[t._v("char")]),t._v(" can represent the basic character set, and another type, called "),a("code",[t._v("wchar_t")]),t._v(", can represent the largest extended character set with sufficient space used on the system.")])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("wchar_t")]),t._v(" bob "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" L"),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'P'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// wchar_t to declare the data type, L indicates the 'wide' property")]),t._v("\nwcout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" L"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tall\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// print out a wide-character string")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[a("code",[t._v("char16_t")]),t._v(", and "),a("code",[t._v("char32_t")]),t._v("\nBecause "),a("code",[t._v("wchar_t")]),t._v("'s sign and size can vary across different implementations, more definite size and signedness data type for character is required.")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char16_t")]),t._v(" ch1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" u"),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'q'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'u' for char16_t character and string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char32_t")]),t._v(" ch2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" U"),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\U0000222B'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"_7-the-const-qualifier"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-the-const-qualifier"}},[t._v("#")]),t._v(" 7. The "),a("code",[t._v("const")]),t._v(" Qualifier")]),t._v(" "),a("p",[t._v("A symbolic name can suggest what the constant represents:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("Month")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// C style")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" Months "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// C++ style")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ! never do the following, this reports an error and think about why?")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" toes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntoes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"},[t._v("Once and for all")]),a("p",[t._v("The compiler does not let you subsequently change the value "),a("code",[t._v("Months")]),t._v(". If you try to, for example, g++ gives an error message that the program used an assignment of a read-only variable. (What is funny is that it's not variable agian, though being a variable.) The keyword "),a("code",[t._v("const")]),t._v(" is termed a "),a("em",[t._v("qualifier")]),t._v(" because it qualifies the meaning of a declaration.")])]),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("Why const")]),t._v(" "),a("p",[t._v("Two reasons:")]),t._v(" "),a("ol",[a("li",[t._v("Data type gets specified explicitly.")]),t._v(" "),a("li",[a("code",[t._v("C++")]),t._v("'s "),a("em",[t._v("scoping rules")]),t._v(" can limit the definition to a particular functions or files.")]),t._v(" "),a("li",[a("code",[t._v("const")]),t._v(" can be with more elaborate types, such as arrays and structures.")])])]),t._v(" "),a("h2",{attrs:{id:"_8-glossary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-glossary"}},[t._v("#")]),t._v(" 8. Glossary")]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("See More")]),t._v(" "),a("ul",[a("li",[t._v("sign")]),t._v(" "),a("li",[t._v("size")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);