(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{638:function(e,t,a){"use strict";a.r(t);var i=a(16),s=Object(i.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"c-primer-plus-chapter-1-get-started-with-c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-primer-plus-chapter-1-get-started-with-c"}},[e._v("#")]),e._v(" "),a("em",[e._v("C++ Primer Plus")]),e._v(": Chapter 1 Get started with C++")]),e._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[e._v("What is C++")]),e._v(" "),a("p",[e._v("A programming language beyond "),a("code",[e._v("C")]),e._v(", with more features.")])]),e._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[e._v("Why C++")]),e._v(" "),a("ul",[a("li",[e._v("Its heritance of "),a("code",[e._v("C")]),e._v(" guarantees its efficiency, generality, and portability")]),e._v(" "),a("li",[e._v("Its extra features "),a("strong",[e._v("OOP")]),e._v(" and "),a("strong",[e._v("Generic")]),e._v(" programming introduces more readability, reusability, abstraction, and data type independency")]),e._v(" "),a("li",[e._v("Its design of a bottom-top strategy against the top-down one")])])]),e._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[e._v("Why C++ the name")]),e._v(" "),a("p",[a("code",[e._v("++")]),e._v(" is an opretor in "),a("code",[e._v("C")]),e._v(", meaning augmenting one. "),a("code",[e._v("C++")]),e._v(" is an augmented version of "),a("code",[e._v("C")]),e._v(". A valid "),a("code",[e._v("C")]),e._v(" program is also a valid "),a("code",[e._v("C++")]),e._v(" program; "),a("code",[e._v("C++")]),e._v(" is a superset of "),a("code",[e._v("C")]),e._v(".")])]),e._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[e._v("Why C++ expands a lot")]),e._v(" "),a("blockquote",[a("p",[e._v("Its emphasis on the utilitarian over the ideological approach")])])]),e._v(" "),a("h2",{attrs:{id:"_1-the-c-languages"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-the-c-languages"}},[e._v("#")]),e._v(" 1. The C languages")]),e._v(" "),a("h3",{attrs:{id:"_1-1-low-high"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-low-high"}},[e._v("#")]),e._v(" 1.1 Low/High")]),e._v(" "),a("p",[e._v("Low-level features:")]),e._v(" "),a("ul",[a("li",[e._v("Works directly with the hardware, e.g., accesses CPU registers/memory locations")]),e._v(" "),a("li",[e._v("Specific to a particular computer processor")]),e._v(" "),a("li",[e._v("Efficient")])]),e._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"title"}),a("p",[e._v("Note that a high-level language can also be hardware-specific; it's a choice.")])]),a("p",[e._v("High-level features:")]),e._v(" "),a("ul",[a("li",[e._v("Problem-soving oriented")]),e._v(" "),a("li",[e._v("Translated by "),a("em",[e._v("compiler")]),e._v(" to low-level language specific to the given machine")]),e._v(" "),a("li",[e._v("Generality")]),e._v(" "),a("li",[e._v("Portability")])]),e._v(" "),a("h3",{attrs:{id:"_1-2-philosophy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-philosophy"}},[e._v("#")]),e._v(" 1.2 Philosophy")]),e._v(" "),a("h4",{attrs:{id:"_1-2-1-c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-c"}},[e._v("#")]),e._v(" 1.2.1 "),a("code",[e._v("C")])]),e._v(" "),a("blockquote",[a("p",[e._v("In general, computer languages deal with two concepts-data and algorithms.")])]),e._v(" "),a("ol",[a("li",[e._v("Procedual Language v.s. Structured Language\n"),a("blockquote",[a("p",[e._v("Structured programming limits branching (choose which instruction to do next) to a small set of well-behaved constructions ("),a("code",[e._v("for")]),e._v(" loop, "),a("code",[e._v("while")]),e._v(" loop, "),a("code",[e._v("do while")]),e._v(" loop, "),a("code",[e._v("if else")]),e._v(" statement).")])])]),e._v(" "),a("li",[e._v("Top-down design"),a("br"),e._v("\nInstead of dealing with bulky talks overall, "),a("code",[e._v("C")]),e._v(" encourages "),a("em",[e._v("functions")]),e._v(",  small units to present individual task module.")])]),e._v(" "),a("h4",{attrs:{id:"_1-2-2-c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-c"}},[e._v("#")]),e._v(" 1.2.2 "),a("code",[e._v("C++")])]),e._v(" "),a("ol",[a("li",[a("strong",[e._v("Definition")])])]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"},[e._v("Class")]),a("p",[e._v("A class is a specification describing a new data form.")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"},[e._v("Object")]),a("p",[e._v("An object is particular data structure constructed according to that plan. (Which plan? To fit the language to the problem.)")])]),a("ol",{attrs:{start:"2"}},[a("li",[a("strong",[e._v("OOP")])])]),e._v(" "),a("blockquote",[a("p",[e._v("OOP emphasizes the data, while procedual one emphasizes the algorithms.")])]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Development")]),a("br"),e._v("\nProcedual programming, to structured programming, to OOP.")]),e._v(" "),a("li",[a("strong",[e._v("Bottom-up design")]),a("br"),e._v("\nBuilds from starting with classes and objects, to a higher level like a program design.")]),e._v(" "),a("li",[a("strong",[e._v("Information hiding")]),a("br"),e._v("\nSafeguards data from improper access.")]),e._v(" "),a("li",[a("strong",[e._v("Polymorphism")]),a("br"),e._v("\nEnables creating definitions for operators and functions, with context determining which definition to use. (@function overloading)")]),e._v(" "),a("li",[a("strong",[e._v("Inheritance")]),a("br"),e._v("\nEnables driving new classes from previous ones.")])]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("strong",[e._v("Generic Programming")])])]),e._v(" "),a("blockquote",[a("p",[e._v("Generic programming emphasizes independence from a particular data type. (type independent)")])]),e._v(" "),a("p",[e._v("For example, you can wirte a C++ function for a generic data type once and for all.")]),e._v(" "),a("h3",{attrs:{id:"_1-3-the-mechanics-of-creating-a-program"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-the-mechanics-of-creating-a-program"}},[e._v("#")]),e._v(" 1.3 The Mechanics of Creating a Program")]),e._v(" "),a("ol",[a("li",[e._v("Write the program in a text editor and save it as the "),a("em",[e._v("source code")]),e._v(" to be compiled.")]),e._v(" "),a("li",[e._v("Compile the source code. A compiler specific to a machine translates it into the internal "),a("em",[e._v("machine language")]),e._v(", which is saved as "),a("em",[e._v("object code")]),e._v(".")]),e._v(" "),a("li",[e._v("Link the object code with additional code. The additional code is usually object code from "),a("em",[e._v("libraries")]),e._v(", a collection of object code of "),a("em",[e._v("functions")]),e._v("; or "),a("em",[e._v("startup code")]),e._v(". The final product is called "),a("em",[e._v("executable code")]),e._v(".")])]),e._v(" "),a("h2",{attrs:{id:"_2-glossary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-glossary"}},[e._v("#")]),e._v(" 2. Glossary")]),e._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[e._v("See More")]),e._v(" "),a("ul",[a("li",[e._v("Class and object")]),e._v(" "),a("li",[e._v("Inheritance")]),e._v(" "),a("li",[e._v("Encapsulation")]),e._v(" "),a("li",[e._v("Polymorphism, virtual function, and runtime type identification")]),e._v(" "),a("li",[e._v("Function overloading")]),e._v(" "),a("li",[e._v("Reference variables")]),e._v(" "),a("li",[e._v("Generic, or type-independent, programming, as provided by the templates and the Standard Template Library")]),e._v(" "),a("li",[e._v("Exception handling")]),e._v(" "),a("li",[e._v("Namespace ---\x3e to manage names of functions, classes, and variables")])])]),e._v(" "),a("h2",{attrs:{id:"_3-summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-summary"}},[e._v("#")]),e._v(" 3. Summary")]),e._v(" "),a("p",[e._v("TBD.")])])}),[],!1,null,null,null);t.default=s.exports}}]);