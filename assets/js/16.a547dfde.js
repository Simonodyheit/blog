(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{634:function(t,e,s){"use strict";s.r(e);var a=s(16),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"floating-point-numbers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#floating-point-numbers"}},[t._v("#")]),t._v(" Floating-point Numbers")]),t._v(" "),s("h3",{attrs:{id:"what-floating"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-floating"}},[t._v("#")]),t._v(" What floating?")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[t._v("A computer stores a number with fractional part in two parts. One part represents a "),s("em",[t._v("value")]),t._v(", while the other is "),s("em",[t._v("scale")]),t._v(". "),s("code",[t._v("34.1245")]),t._v(" and "),s("code",[t._v("24124.5")]),t._v(" are identical except for "),s("em",[t._v("scale")]),t._v("."),s("br"),t._v("\nThe scaling factor servers to move the decimal point, hence the term "),s("em",[t._v("floating-point")]),t._v(".")])]),s("h3",{attrs:{id:"why-floating"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#why-floating"}},[t._v("#")]),t._v(" Why floating?")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("ol",[s("li",[t._v("It enables to represent numbers with fractional parts.")]),t._v(" "),s("li",[t._v("It can represent large numbers with which "),s("code",[t._v("long")]),t._v(" fails.")]),t._v(" "),s("li",[t._v("This holds true to very small values.")])])]),s("h3",{attrs:{id:"notation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#notation"}},[t._v("#")]),t._v(" Notation")]),t._v(" "),s("ol",[s("li",[s("code",[t._v(".")]),t._v(" the period")]),t._v(" "),s("li",[s("code",[t._v("E")]),t._v(" or "),s("code",[t._v("e")])])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.52e+8")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.33E-4")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7E5")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18.32e13")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.69e12")]),t._v("\n")])])]),s("h3",{attrs:{id:"types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#types"}},[t._v("#")]),t._v(" Types")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("ol",[s("li",[s("code",[t._v("float")])]),t._v(" "),s("li",[s("code",[t._v("double")])]),t._v(" "),s("li",[s("code",[t._v("long double")]),s("br"),t._v("\nThese types are described in terms of the number of "),s("em",[t._v("significant figures")]),t._v("(the meaningful digits in a number) they can represent and the minimum allowable range of exponents.")])])]),s("h3",{attrs:{id:"floating-point-constants"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#floating-point-constants"}},[t._v("#")]),t._v(" Floating-Point Constants")]),t._v(" "),s("p",[t._v("By default, floating-point constants such as "),s("code",[t._v("8.24")]),t._v(" and "),s("code",[t._v("2.4E8")]),t._v(" are type "),s("code",[t._v("double")]),t._v(".")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"title"}),s("p",[t._v("Remember, floating-point constants are type double by default.")])]),s("p",[t._v("Specify the type as follows:")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.234f")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a float constant")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.45E20F")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a float constant")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.345324E28")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a double constant")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.2L")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a long double constant")]),t._v("\n")])])]),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("Why specify?")]),t._v(" "),s("p",[t._v("Once you define a variable in the "),s("code",[t._v("C++")]),t._v(" program, you need also specify the data type. So on which scenario should one use the suffix to specify the data type?  ("),s("code",[t._v("cout")]),t._v(" and a pure number with no assignment of it to a variable)")])]),t._v(" "),s("h2",{attrs:{id:"c-arithmetic-operators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c-arithmetic-operators"}},[t._v("#")]),t._v(" "),s("code",[t._v("C++")]),t._v(" Arithmetic Operators")]),t._v(" "),s("h3",{attrs:{id:"five-basic-arithmetic-operators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#five-basic-arithmetic-operators"}},[t._v("#")]),t._v(" Five basic arithmetic operators")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("+")]),t._v(" ---\x3e add")]),t._v(" "),s("li",[s("code",[t._v("-")]),t._v(" ---\x3e subtract")]),t._v(" "),s("li",[s("code",[t._v("*")]),t._v(" ---\x3e multiply")]),t._v(" "),s("li",[s("code",[t._v("/")]),t._v(" ---\x3e divide and integer part if both operands are integers")]),t._v(" "),s("li",[s("code",[t._v("%")]),t._v(" ---\x3e modulus")])]),t._v(" "),s("h3",{attrs:{id:"order-of-operation-operator-precedence-and-associativity"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#order-of-operation-operator-precedence-and-associativity"}},[t._v("#")]),t._v(" Order of Operation: Operator Precedence and Associativity")]),t._v(" "),s("ol",[s("li",[t._v("Operator Precedence\n"),s("code",[t._v("int a = 3 + 4 * 5;")]),t._v(" is "),s("code",[t._v("int a = 3 + (4 * 5);")])])]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("lingo")]),t._v(" "),s("ol",[s("li",[t._v("Use the parenthesis to enforce the priorities.")]),t._v(" "),s("li",[s("code",[t._v("*")]),t._v(", "),s("code",[t._v("/")]),t._v(", "),s("code",[t._v("%")]),t._v(" have equal/the same precedence.")]),t._v(" "),s("li",[s("code",[t._v("+")]),t._v(" and "),s("code",[t._v("-")]),t._v(" share a lower precedence.")])])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("Associativity\n"),s("code",[t._v("int b = 120 / 4 * 5;")]),t._v(" is "),s("code",[t._v("int b = (120 / 4) * 5;")])])]),t._v(" "),s("p",[s("strong",[t._v("A case study")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" dues "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Order precedence tells us that "),s("code",[t._v("20 * 5")]),t._v(" and "),s("code",[t._v("24 * 6")]),t._v(" take place first against the "),s("code",[t._v("+")]),t._v(".\nHowever, the associativity does not say "),s("code",[t._v("20 * 5")]),t._v(" takes place first since it works only when "),s("em",[t._v("two operators share the same operands")]),t._v(". The two "),s("code",[t._v("*")]),t._v(" operators do not share a common operand, so the rule fails to apply.")]),t._v(" "),s("blockquote",[s("p",[t._v("In fact, "),s("code",[t._v("C++")]),t._v(" leaves it to the implementation to decide which order works best on a system. For this example, either order gives the same result, but there are circumstances in which the order can make a difference.")])]),t._v(" "),s("h2",{attrs:{id:"type-conversion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-conversion"}},[t._v("#")]),t._v(" Type Conversion")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"},[t._v("FACTS")]),s("ol",[s("li",[t._v("There are 11 integer types and 3 floating-point types in "),s("code",[t._v("C++")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("C++")]),t._v(" makes type conversions automatically.\n"),s("ol",[s("li",[s("code",[t._v("C++")]),t._v(" converts values when you assign a value of one arithmetic type to a variable of another arithmetic type.")]),t._v(" "),s("li",[s("code",[t._v("C++")]),t._v(" converts values when you combine mixed types in expressions.")]),t._v(" "),s("li",[s("code",[t._v("C++")]),t._v(" converts vaules when you pass arguments to functions.")])])])])]),s("h3",{attrs:{id:"conversion-on-initialization-and-assignment"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conversion-on-initialization-and-assignment"}},[t._v("#")]),t._v(" Conversion on Initialization and Assignment")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"title"},[t._v("Potential Problems Posed by Conversion")]),s("ol",[s("li",[t._v("Bigger floating-point type to smaller floating-type, such as "),s("code",[t._v("double")]),t._v(" to "),s("code",[t._v("float")]),t._v(" ----\x3e Loss of precision; value might be out of range for target type, in which case result is undefined.")]),t._v(" "),s("li",[t._v("Floating-point type to integer type ----\x3e Loss of fractional part; Overflow issue as in the above.")]),t._v(" "),s("li",[t._v("Bigger integer type to smaller integer type, such as "),s("code",[t._v("long")]),t._v(" to "),s("code",[t._v("short")]),t._v(" ----\x3e Overflow issue; loss of bytes.")])])]),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// init.cpp -- type changes on initialization")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ios_base"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("fixed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ios_base"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("floatfield"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" tree "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// int converted to float")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("guess")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.9832")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// double (default) converted to int")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" debt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7.2E12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// result not defined")]),t._v("\n    cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tree = "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" tree "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"guess = "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" guess "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"debt = "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" debt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined result varied from complier to compiler")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"conversions-in-expressions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conversions-in-expressions"}},[t._v("#")]),t._v(" Conversions in Expressions")]),t._v(" "),s("p",[s("strong",[t._v("Integral promotion")]),t._v(":")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("C++")]),t._v(" converts "),s("code",[t._v("bool")]),t._v(", "),s("code",[t._v("char")]),t._v(", "),s("code",[t._v("unsigned char")]),t._v(", and "),s("code",[t._v("short")]),t._v(" vaules to "),s("code",[t._v("int")]),t._v("."),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" chickens "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// line1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" ducks "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("35")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// line2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" fowl "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" chickens "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ducks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// line3")]),t._v("\n")])])])]),t._v(" "),s("li",[s("code",[t._v("unsigned short")]),t._v(" is converted to "),s("code",[t._v("int")]),t._v(" if "),s("code",[t._v("short")]),t._v(" is smaller than "),s("code",[t._v("int")]),t._v(", otherwise to "),s("code",[t._v("unsigned int")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("wchar_t")]),t._v(" is promoted to the first of the following types that is wide enough to accommodate its range: "),s("code",[t._v("int")]),t._v(", "),s("code",[t._v("unsigned int")]),t._v(", "),s("code",[t._v("long")]),t._v(", "),s("code",[t._v("unsigned long")]),t._v(".")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"},[t._v("Rules")]),s("ol",[s("li",[t._v("If either operand is type "),s("code",[t._v("long double")]),t._v(", the other operand is converted to "),s("code",[t._v("long double")]),t._v(".")]),t._v(" "),s("li",[t._v("Otherwise, if either operand is "),s("code",[t._v("double")]),t._v(", the other is converted to "),s("code",[t._v("double")]),t._v(".")]),t._v(" "),s("li",[t._v("Otherwise, if either operand is "),s("code",[t._v("float")]),t._v(", the other to "),s("code",[t._v("float")]),t._v(".")]),t._v(" "),s("li",[t._v("Otherwise, the operands are integer types (11 types!) and the "),s("em",[t._v("integral promotions")]),t._v(" are made.")]),t._v(" "),s("li",[t._v("In that case, if both operands are signed or if both are unsigned, and one is lower rank than the other, it is converted to the higher rank.")]),t._v(" "),s("li",[t._v("Otherwise, one operand is signed and one is unsigned. If the unsinged operand is of higher rank, the latter is converted to the type of the unsigned operand.")]),t._v(" "),s("li",[t._v("Otherwise, if the signed type can represent all values of the unsigned type, the unsigned operand is converted to the type of the signed type.")]),t._v(" "),s("li",[t._v("Otherwise, both operands are converted to the unsigned version of the signed type.")])])]),s("h3",{attrs:{id:"conversions-in-passing-arguments"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conversions-in-passing-arguments"}},[t._v("#")]),t._v(" Conversions in Passing Arguments")]),t._v(" "),s("p",[t._v("TODO")]),t._v(" "),s("h2",{attrs:{id:"glossary"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#glossary"}},[t._v("#")]),t._v(" Glossary")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("See More")]),t._v(" "),s("ol",[s("li",[t._v("Division Diversion")]),t._v(" "),s("li",[t._v("Narrowing")]),t._v(" "),s("li",[t._v("List-Initiation")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);